/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { KeyCreateParameters as KeyCreateParametersMapper, VaultCreateOrUpdateParameters as VaultCreateOrUpdateParametersMapper, VaultPatchParameters as VaultPatchParametersMapper, VaultAccessPolicyParameters as VaultAccessPolicyParametersMapper, VaultCheckNameAvailabilityParameters as VaultCheckNameAvailabilityParametersMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, ManagedHsm as ManagedHsmMapper, MhsmPrivateEndpointConnection as MhsmPrivateEndpointConnectionMapper, SecretCreateOrUpdateParameters as SecretCreateOrUpdateParametersMapper, SecretPatchParameters as SecretPatchParametersMapper } from "../models/mappers";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: KeyCreateParametersMapper
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const vaultName = {
    parameterPath: "vaultName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$")
        },
        serializedName: "vaultName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const keyName = {
    parameterPath: "keyName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]{1,127}$")
        },
        serializedName: "keyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const keyVersion = {
    parameterPath: "keyVersion",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-fA-F0-9]{32}$")
        },
        serializedName: "keyVersion",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: VaultCreateOrUpdateParametersMapper
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: VaultPatchParametersMapper
};
export const vaultName1 = {
    parameterPath: "vaultName",
    mapper: {
        serializedName: "vaultName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: VaultAccessPolicyParametersMapper
};
export const operationKind = {
    parameterPath: "operationKind",
    mapper: {
        serializedName: "operationKind",
        required: true,
        type: {
            name: "Enum",
            allowedValues: ["add", "replace", "remove"]
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const filter = {
    parameterPath: "filter",
    mapper: {
        defaultValue: "resourceType eq 'Microsoft.KeyVault/vaults'",
        isConstant: true,
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2015-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const vaultName2 = {
    parameterPath: "vaultName",
    mapper: VaultCheckNameAvailabilityParametersMapper
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnectionMapper
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: ManagedHsmMapper
};
export const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties1 = {
    parameterPath: "properties",
    mapper: MhsmPrivateEndpointConnectionMapper
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: SecretCreateOrUpdateParametersMapper
};
export const secretName = {
    parameterPath: "secretName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]{1,127}$")
        },
        serializedName: "secretName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: SecretPatchParametersMapper
};
export const secretName1 = {
    parameterPath: "secretName",
    mapper: {
        serializedName: "secretName",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map