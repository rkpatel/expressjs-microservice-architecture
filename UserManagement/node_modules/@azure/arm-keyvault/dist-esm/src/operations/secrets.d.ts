import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Secrets } from "../operationsInterfaces";
import { KeyVaultManagementClient } from "../keyVaultManagementClient";
import { Secret, SecretsListOptionalParams, SecretCreateOrUpdateParameters, SecretsCreateOrUpdateOptionalParams, SecretsCreateOrUpdateResponse, SecretPatchParameters, SecretsUpdateOptionalParams, SecretsUpdateResponse, SecretsGetOptionalParams, SecretsGetResponse } from "../models";
/** Class containing Secrets operations. */
export declare class SecretsImpl implements Secrets {
    private readonly client;
    /**
     * Initialize a new instance of the class Secrets class.
     * @param client Reference to the service client
     */
    constructor(client: KeyVaultManagementClient);
    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for
     * internal use in ARM deployments. Users should use the data-plane REST service for interaction with
     * vault secrets.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, vaultName: string, options?: SecretsListOptionalParams): PagedAsyncIterableIterator<Secret>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Create or update a secret in a key vault in the specified subscription.  NOTE: This API is intended
     * for internal use in ARM deployments. Users should use the data-plane REST service for interaction
     * with vault secrets.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param secretName Name of the secret
     * @param parameters Parameters to create or update the secret
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, vaultName: string, secretName: string, parameters: SecretCreateOrUpdateParameters, options?: SecretsCreateOrUpdateOptionalParams): Promise<SecretsCreateOrUpdateResponse>;
    /**
     * Update a secret in the specified subscription.  NOTE: This API is intended for internal use in ARM
     * deployments.  Users should use the data-plane REST service for interaction with vault secrets.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param secretName Name of the secret
     * @param parameters Parameters to patch the secret
     * @param options The options parameters.
     */
    update(resourceGroupName: string, vaultName: string, secretName: string, parameters: SecretPatchParameters, options?: SecretsUpdateOptionalParams): Promise<SecretsUpdateResponse>;
    /**
     * Gets the specified secret.  NOTE: This API is intended for internal use in ARM deployments. Users
     * should use the data-plane REST service for interaction with vault secrets.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param secretName The name of the secret.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vaultName: string, secretName: string, options?: SecretsGetOptionalParams): Promise<SecretsGetResponse>;
    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for
     * internal use in ARM deployments. Users should use the data-plane REST service for interaction with
     * vault secrets.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=secrets.d.ts.map